[
  {
    "tool_name": "assay_description",
    "method": "GET",
    "url": "/api/assay-description",
    "description": "Retrieve assay description from PubChem using PUG REST API.",
    "required_parameters": [],
    "parameter_types": {
      "aid": "Any",
      "output_format": "Any",
      "version": "Any"
    },
    "example": "assay_description(aid=None, output_format='XML', version=None)",
    "total_parameters": 3,
    "source_file": "MCPTools/assay_description_GET.py"
  },
  {
    "tool_name": "calculate_mass_from_wurcs",
    "method": "GET",
    "url": "/api/calculate-mass-from-wurcs",
    "description": "Calculate the mass from WURCS.",
    "required_parameters": [],
    "parameter_types": {
      "wurcs": "Any"
    },
    "example": "calculate_mass_from_wurcs(wurcs=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/calculate_mass_from_wurcs.py"
  },
  {
    "tool_name": "compound_property_tables",
    "method": "GET",
    "url": "/api/compound-property-tables",
    "description": "Retrieve chemical property data for specified compounds in CSV format.",
    "required_parameters": [],
    "parameter_types": {
      "cid": "Any",
      "property_tags": "Any"
    },
    "example": "compound_property_tables(cid=None, property_tags=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/compound_property_tables_GET.py"
  },
  {
    "tool_name": "convert_composition_text_to_wurcs_format",
    "method": "GET",
    "url": "/api/convert-composition-text-to-wurcs-format",
    "description": "Convert glycan composition text to WURCS format.",
    "required_parameters": [],
    "parameter_types": {
      "text": "Any"
    },
    "example": "convert_composition_text_to_wurcs_format(text=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/convert_composition_text_to_wurcs_format_GET.py"
  },
  {
    "tool_name": "convert_composition_to_wurcs",
    "method": "GET",
    "url": "/api/convert-composition-to-wurcs",
    "description": "Convert glycan composition text to WURCS format.",
    "required_parameters": [],
    "parameter_types": {
      "composition": "Any"
    },
    "example": "convert_composition_to_wurcs(composition=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/convert_composition_to_wurcs.py"
  },
  {
    "tool_name": "convert_gws_format_to_wurcs_format",
    "method": "GET",
    "url": "/api/convert-gws-format-to-wurcs-format",
    "description": "Convert GWS format to WURCS format using the GlycoSMOS API.",
    "required_parameters": [],
    "parameter_types": {
      "gws": "Any"
    },
    "example": "convert_gws_format_to_wurcs_format(gws=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/convert_gws_format_to_wurcs_format.py"
  },
  {
    "tool_name": "convert_iupac_extended_to_wurcs",
    "method": "GET",
    "url": "/api/convert-iupac-extended-to-wurcs",
    "description": "Convert IUPAC Extended format to WURCS format using the GlycanFormatConverter API.",
    "required_parameters": [
      "iupacextended"
    ],
    "parameter_types": {
      "iupacextended": "Any"
    },
    "example": "convert_iupac_extended_to_wurcs(iupacextended='example')",
    "total_parameters": 1,
    "source_file": "MCPTools/convert_iupac_extended_to_wurcs.py"
  },
  {
    "tool_name": "conv",
    "method": "GET",
    "url": "/api/conv",
    "description": "Convert KEGG identifiers to/from outside identifiers.",
    "required_parameters": [],
    "parameter_types": {
      "target_db": "Any",
      "source_db": "Any",
      "dbentries": "Any"
    },
    "example": "conv(target_db=None, source_db=None, dbentries=None)",
    "total_parameters": 3,
    "source_file": "MCPTools/conv_GET.py"
  },
  {
    "tool_name": "ddi",
    "method": "GET",
    "url": "/api/ddi",
    "description": "Find adverse drug-drug interactions from the KEGG database.",
    "required_parameters": [],
    "parameter_types": {
      "dbentry": "Any",
      "multiple_entries": "Any"
    },
    "example": "ddi(dbentry=None, multiple_entries=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/ddi_GET.py"
  },
  {
    "tool_name": "find",
    "method": "GET",
    "url": "/api/find",
    "description": "Find entries with matching query keyword or other query data in the KEGG database.",
    "required_parameters": [],
    "parameter_types": {
      "database": "Any",
      "query": "Any",
      "option": "Any"
    },
    "example": "find(database=None, query=None, option=None)",
    "total_parameters": 3,
    "source_file": "MCPTools/find_GET.py"
  },
  {
    "tool_name": "full_record_retrieval",
    "method": "GET",
    "url": "/api/full-record-retrieval",
    "description": "Retrieves a full record from PubChem using the PUG REST API.",
    "required_parameters": [],
    "parameter_types": {
      "source_id": "Any",
      "cid": "Any",
      "record_type": "Any",
      "image_size": "Any"
    },
    "example": "full_record_retrieval(source_id=None, cid=None, record_type='2d', image_size='large')",
    "total_parameters": 4,
    "source_file": "MCPTools/full_record_retrieval_GET.py"
  },
  {
    "tool_name": "generate_glycan_image",
    "method": "GET",
    "url": "/api/generate-glycan-image",
    "description": "Generate a glycan image based on WURCS notation.",
    "required_parameters": [],
    "parameter_types": {
      "format": "Any",
      "type": "Any",
      "wurcs": "Any",
      "verify": "Any"
    },
    "example": "generate_glycan_image(format='png', type='html', wurcs=None, verify=True)",
    "total_parameters": 4,
    "source_file": "MCPTools/generate_glycan_image.py"
  },
  {
    "tool_name": "get_biotech_lectins",
    "method": "GET",
    "url": "/api/get-biotech-lectins",
    "description": "Retrieve information about biotechnology-related lectins from the UniLectin database.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any",
      "exactmatch": "Any"
    },
    "example": "get_biotech_lectins(getcolumns=None, wherecolumn=None, isvalue=None, limit=1000, exactmatch=False)",
    "total_parameters": 5,
    "source_file": "MCPTools/get_biotech_lectins.py"
  },
  {
    "tool_name": "get_feature_by_locations",
    "method": "GET",
    "url": "/api/get-feature-by-locations",
    "description": "Search UniProt entries by taxonomy and genomic coordinates.",
    "required_parameters": [],
    "parameter_types": {
      "taxonomy": "Any",
      "locations": "Any",
      "offset": "Any",
      "size": "Any",
      "in_range": "Any",
      "format": "Any"
    },
    "example": "get_feature_by_locations(taxonomy=None, locations=None, offset=0, size=100, in_range=None, format='json')",
    "total_parameters": 6,
    "source_file": "MCPTools/get_feature_by_locations_GET.py"
  },
  {
    "tool_name": "get_fungal_lectins",
    "method": "GET",
    "url": "/api/get-fungal-lectins",
    "description": "Retrieve information about fungal lectins from the UniLectin database.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_fungal_lectins(getcolumns='fold,domain,species', wherecolumn='species', isvalue='Sclerotinia sclerotiorum', limit=2000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_fungal_lectins.py"
  },
  {
    "tool_name": "get_gene_centric_proteins_by_proteome_upid__deprecated_",
    "method": "GET",
    "url": "/api/get-gene-centric-proteins-by-proteome-upid--deprecated-",
    "description": "Get gene centric proteins by proteome UPID (deprecated).",
    "required_parameters": [],
    "parameter_types": {
      "upid": "Any"
    },
    "example": "get_gene_centric_proteins_by_proteome_upid__deprecated_(upid=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_gene_centric_proteins_by_proteome_upid__deprecated__GET.py"
  },
  {
    "tool_name": "get_gene_centric_proteins_by_uniprot_accession",
    "method": "GET",
    "url": "/api/get-gene-centric-proteins-by-uniprot-accession",
    "description": "Get gene centric proteins by Uniprot accession.",
    "required_parameters": [],
    "parameter_types": {
      "accession": "Any"
    },
    "example": "get_gene_centric_proteins_by_uniprot_accession(accession=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_gene_centric_proteins_by_uniprot_accession_GET.py"
  },
  {
    "tool_name": "get_genome_coordinate_by_protein_sequence_position",
    "method": "GET",
    "url": "/api/get-genome-coordinate-by-protein-sequence-position",
    "description": "Get genome coordinate by protein sequence position.",
    "required_parameters": [],
    "parameter_types": {
      "taxonomy": "Any",
      "chromosome": "Any",
      "gstart": "Any",
      "gend": "Any"
    },
    "example": "get_genome_coordinate_by_protein_sequence_position(taxonomy=None, chromosome=None, gstart=None, gend=None)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_genome_coordinate_by_protein_sequence_position_GET.py"
  },
  {
    "tool_name": "get",
    "method": "GET",
    "url": "/api/get",
    "description": "Retrieve given database entries from the KEGG API.",
    "required_parameters": [],
    "parameter_types": {
      "dbentries": "Any",
      "option": "Any"
    },
    "example": "get(dbentries=None, option=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/get_GET.py"
  },
  {
    "tool_name": "get_human_lectome",
    "method": "GET",
    "url": "/api/get-human-lectome",
    "description": "Retrieve human lectome data from the UniLectin database.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_human_lectome(getcolumns='RefSeqID,UniProt_ID', wherecolumn='lectinStatus', isvalue='Curated', limit=1000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_human_lectome.py"
  },
  {
    "tool_name": "get_lectins",
    "method": "GET",
    "url": "/api/get-lectins",
    "description": "Retrieve lectin data from UniLectin3D database based on specified column filters and criteria.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_lectins(getcolumns='pdb,uniprot', wherecolumn='pdb', isvalue='%%', limit=1000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_lectins.py"
  },
  {
    "tool_name": "get_ligands",
    "method": "GET",
    "url": "/api/get-ligands",
    "description": "Retrieve ligand information from the UniLectin database.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_ligands(getcolumns='ligand_id,iupac', wherecolumn='iupac', isvalue='%Gal%', limit=1000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_ligands.py"
  },
  {
    "tool_name": "get_natural_variants_by_dbsnp_id",
    "method": "GET",
    "url": "/api/get-natural-variants-by-dbsnp-id",
    "description": "Get natural variants in UniProt by NIH-NCBI SNP database identifier.",
    "required_parameters": [
      "dbid"
    ],
    "parameter_types": {
      "dbid": "Any",
      "offset": "Any",
      "size": "Any",
      "sourcetype": "Any",
      "consequencetype": "Any",
      "wildtype": "Any",
      "alternativesequence": "Any",
      "location": "Any"
    },
    "example": "get_natural_variants_by_dbsnp_id(dbid=123, offset=0, size=100, sourcetype=None, consequencetype=None, wildtype=None, alternativesequence=None, location=None)",
    "total_parameters": 8,
    "source_file": "MCPTools/get_natural_variants_by_dbsnp_id_GET.py"
  },
  {
    "tool_name": "get_natural_variants_by_hgvs_expression",
    "method": "GET",
    "url": "/api/get-natural-variants-by-hgvs-expression",
    "description": "Get natural variants in UniProt by HGVS expression.",
    "required_parameters": [],
    "parameter_types": {
      "hgvs": "Any",
      "offset": "Any",
      "size": "Any",
      "sourcetype": "Any",
      "consequencetype": "Any",
      "wildtype": "Any",
      "alternativesequence": "Any",
      "location": "Any"
    },
    "example": "get_natural_variants_by_hgvs_expression(hgvs=None, offset=0, size=100, sourcetype=None, consequencetype=None, wildtype=None, alternativesequence=None, location=None)",
    "total_parameters": 8,
    "source_file": "MCPTools/get_natural_variants_by_hgvs_expression_GET.py"
  },
  {
    "tool_name": "get_propeller_lectins",
    "method": "GET",
    "url": "/api/get-propeller-lectins",
    "description": "Retrieve information about propeller lectins from the UniLectin database based on specified column filters.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_propeller_lectins(getcolumns='domain,uniprot,superkingdom', wherecolumn='superkingdom', isvalue='Bacteria%', limit=2000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_propeller_lectins.py"
  },
  {
    "tool_name": "get_proteins_by_proteome_upid",
    "method": "GET",
    "url": "/api/get-proteins-by-proteome-upid",
    "description": "Get proteins by proteome UPID from the EBI API.",
    "required_parameters": [],
    "parameter_types": {
      "upid": "Any",
      "reviewed": "Any"
    },
    "example": "get_proteins_by_proteome_upid(upid=None, reviewed=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/get_proteins_by_proteome_upid_GET.py"
  },
  {
    "tool_name": "get_proteins",
    "method": "GET",
    "url": "/api/get-proteins",
    "description": "Retrieve detailed protein information from the O-GlcNAc Database.",
    "required_parameters": [],
    "parameter_types": {
      "query_protein": "Any"
    },
    "example": "get_proteins(query_protein=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_proteins_GET.py"
  },
  {
    "tool_name": "get_proteome_by_upid",
    "method": "GET",
    "url": "/api/get-proteome-by-upid",
    "description": "Get proteome information by UniProt Proteome UPID.",
    "required_parameters": [],
    "parameter_types": {
      "upid": "Any"
    },
    "example": "get_proteome_by_upid(upid=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_proteome_by_upid_GET.py"
  },
  {
    "tool_name": "get_proteomics_peptides_by_accession",
    "method": "GET",
    "url": "/api/get-proteomics-peptides-by-accession",
    "description": "Get proteomics peptides mapped to UniProt by accession.",
    "required_parameters": [],
    "parameter_types": {
      "accession": "Any"
    },
    "example": "get_proteomics_peptides_by_accession(accession=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_proteomics_peptides_by_accession_GET.py"
  },
  {
    "tool_name": "get_proteomics_peptide_ptm",
    "method": "GET",
    "url": "/api/get-proteomics-peptide-ptm",
    "description": "Get proteomics peptide PTM mapped to UniProt by accession.",
    "required_parameters": [
      "accession"
    ],
    "parameter_types": {
      "accession": "Any",
      "confidence_score": "Any"
    },
    "example": "get_proteomics_peptide_ptm(accession='example', confidence_score=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/get_proteomics_peptide_ptm_GET.py"
  },
  {
    "tool_name": "get_trefoil_lectins",
    "method": "GET",
    "url": "/api/get-trefoil-lectins",
    "description": "Retrieve information about trefoil lectins from the UniLectin database based on specified column filters.",
    "required_parameters": [],
    "parameter_types": {
      "getcolumns": "Any",
      "wherecolumn": "Any",
      "isvalue": "Any",
      "limit": "Any"
    },
    "example": "get_trefoil_lectins(getcolumns=None, wherecolumn=None, isvalue=None, limit=1000)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_trefoil_lectins.py"
  },
  {
    "tool_name": "get_uniparc_best_guess",
    "method": "GET",
    "url": "/api/get-uniparc-best-guess",
    "description": "Get UniParc longest sequence for entries.",
    "required_parameters": [],
    "parameter_types": {
      "upi": "Any",
      "accession": "Any",
      "dbid": "Any",
      "gene": "Any",
      "taxid": "Any",
      "format": "Any"
    },
    "example": "get_uniparc_best_guess(upi=None, accession=None, dbid=None, gene=None, taxid=None, format=None)",
    "total_parameters": 6,
    "source_file": "MCPTools/get_uniparc_best_guess_GET.py"
  },
  {
    "tool_name": "get_uniparc_entries_by_cross_reference_accessions",
    "method": "GET",
    "url": "/api/get-uniparc-entries-by-cross-reference-accessions",
    "description": "Get UniParc entries by all UniParc cross reference accessions.",
    "required_parameters": [
      "dbid"
    ],
    "parameter_types": {
      "dbid": "Any",
      "offset": "Any",
      "size": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any",
      "format": "Any"
    },
    "example": "get_uniparc_entries_by_cross_reference_accessions(dbid=123, offset=0, size=100, rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None, format='fasta')",
    "total_parameters": 8,
    "source_file": "MCPTools/get_uniparc_entries_by_cross_reference_accessions_GET.py"
  },
  {
    "tool_name": "get_uniparc_entries_by_proteome_upid",
    "method": "GET",
    "url": "/api/get-uniparc-entries-by-proteome-upid",
    "description": "Get UniParc entries by Proteome UPID.",
    "required_parameters": [],
    "parameter_types": {
      "upid": "Any",
      "offset": "Any",
      "size": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any",
      "format": "Any"
    },
    "example": "get_uniparc_entries_by_proteome_upid(upid=None, offset=0, size=100, rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None, format='text/x-fasta')",
    "total_parameters": 8,
    "source_file": "MCPTools/get_uniparc_entries_by_proteome_upid_GET.py"
  },
  {
    "tool_name": "get_uniparc_entries_by_sequence",
    "method": "GET",
    "url": "/api/get-uniparc-entries-by-sequence",
    "description": "Get UniParc entries by sequence.",
    "required_parameters": [
      "body"
    ],
    "parameter_types": {
      "body": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any"
    },
    "example": "get_uniparc_entries_by_sequence(body='example', rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None)",
    "total_parameters": 5,
    "source_file": "MCPTools/get_uniparc_entries_by_sequence.py"
  },
  {
    "tool_name": "get_uniparc_entry_by_uniprot_accession",
    "method": "GET",
    "url": "/api/get-uniparc-entry-by-uniprot-accession",
    "description": "Get UniParc entry by UniProt accession.",
    "required_parameters": [
      "accession"
    ],
    "parameter_types": {
      "accession": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any"
    },
    "example": "get_uniparc_entry_by_uniprot_accession(accession='example', rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None)",
    "total_parameters": 5,
    "source_file": "MCPTools/get_uniparc_entry_by_uniprot_accession_GET.py"
  },
  {
    "tool_name": "get_uniparc_entry_by_upi",
    "method": "GET",
    "url": "/api/get-uniparc-entry-by-upi",
    "description": "Get UniParc entry by UniParc UPI.",
    "required_parameters": [
      "upi"
    ],
    "parameter_types": {
      "upi": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any"
    },
    "example": "get_uniparc_entry_by_upi(upi='example', rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None)",
    "total_parameters": 5,
    "source_file": "MCPTools/get_uniparc_entry_by_upi_GET.py"
  },
  {
    "tool_name": "get_uniprot_entries_by_genomic_database_cross_reference_ids",
    "method": "GET",
    "url": "/api/get-uniprot-entries-by-genomic-database-cross-reference-ids",
    "description": "Search UniProt entries by genomic database cross reference IDs: Ensembl, CCDS, HGNC or RefSeq.",
    "required_parameters": [],
    "parameter_types": {
      "dbtype": "Any",
      "dbid": "Any",
      "offset": "Any",
      "size": "Any"
    },
    "example": "get_uniprot_entries_by_genomic_database_cross_reference_ids(dbtype=None, dbid=None, offset=0, size=100)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_uniprot_entries_by_genomic_database_cross_reference_ids_GET.py"
  },
  {
    "tool_name": "get_uniprot_entry_by_accession",
    "method": "GET",
    "url": "/api/get-uniprot-entry-by-accession",
    "description": "Get UniProt entry by accession.",
    "required_parameters": [],
    "parameter_types": {
      "accession": "Any",
      "format": "Any"
    },
    "example": "get_uniprot_entry_by_accession(accession=None, format='json')",
    "total_parameters": 2,
    "source_file": "MCPTools/get_uniprot_entry_by_accession_GET.py"
  },
  {
    "tool_name": "get_uniprot_isoform_entries",
    "method": "GET",
    "url": "/api/get-uniprot-isoform-entries",
    "description": "Get UniProt isoform entries from parent entry accession.",
    "required_parameters": [],
    "parameter_types": {
      "accession": "Any",
      "format": "Any"
    },
    "example": "get_uniprot_isoform_entries(accession=None, format='json')",
    "total_parameters": 2,
    "source_file": "MCPTools/get_uniprot_isoform_entries_GET.py"
  },
  {
    "tool_name": "get_uniprot_protein_sequence_features_by_accession",
    "method": "GET",
    "url": "/api/get-uniprot-protein-sequence-features-by-accession",
    "description": "Get UniProt protein sequence features by accession.",
    "required_parameters": [
      "accession"
    ],
    "parameter_types": {
      "accession": "str",
      "categories": "Union[List, NoneType]",
      "types": "Union[List, NoneType]",
      "location": "Union[str, NoneType]"
    },
    "example": "get_uniprot_protein_sequence_features_by_accession(accession='example', categories=None, types=None, location=None)",
    "total_parameters": 4,
    "source_file": "MCPTools/get_uniprot_protein_sequence_features_by_accession_GET.py"
  },
  {
    "tool_name": "get_variation_for_accession_location",
    "method": "GET",
    "url": "/api/get-variation-for-accession-location",
    "description": "Get natural variants by list of accession and its locations.",
    "required_parameters": [],
    "parameter_types": {
      "accession_locations": "Any"
    },
    "example": "get_variation_for_accession_location(accession_locations=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/get_variation_for_accession_location_GET.py"
  },
  {
    "tool_name": "glycan_detail",
    "method": "GET",
    "url": "/api/glycan-detail",
    "description": "Retrieve detailed information about a glycan using its GlyTouCan accession.",
    "required_parameters": [],
    "parameter_types": {
      "glytoucan_ac": "Any",
      "payload": "Any"
    },
    "example": "glycan_detail(glytoucan_ac='G17689DH', payload=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/glycan_detail.py"
  },
  {
    "tool_name": "info",
    "method": "GET",
    "url": "/api/info",
    "description": "Retrieve information about a KEGG database.",
    "required_parameters": [],
    "parameter_types": {
      "database": "Any"
    },
    "example": "info(database='kegg')",
    "total_parameters": 1,
    "source_file": "MCPTools/info_GET.py"
  },
  {
    "tool_name": "link",
    "method": "GET",
    "url": "/api/link",
    "description": "Find related entries by using database cross-references in the KEGG database.",
    "required_parameters": [],
    "parameter_types": {
      "target_db": "Any",
      "source_db": "Any",
      "dbentries": "Any",
      "option": "Any"
    },
    "example": "link(target_db=None, source_db=None, dbentries=None, option=None)",
    "total_parameters": 4,
    "source_file": "MCPTools/link_GET.py"
  },
  {
    "tool_name": "list_kegg",
    "method": "GET",
    "url": "/api/list-kegg",
    "description": "Retrieve a list of entries from a specified KEGG database with their identifiers and descriptions.",
    "required_parameters": [],
    "parameter_types": {
      "database": "Any"
    },
    "example": "list_kegg(database=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/list_kegg.py"
  },
  {
    "tool_name": "obtain_glytoucan_id_from_wurcs",
    "method": "GET",
    "url": "/api/obtain-glytoucan-id-from-wurcs",
    "description": "Obtain the GlyTouCan ID from WURCS format text.",
    "required_parameters": [],
    "parameter_types": {
      "wurcs": "Any"
    },
    "example": "obtain_glytoucan_id_from_wurcs(wurcs=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/obtain_glytoucan_id_from_wurcs.py"
  },
  {
    "tool_name": "obtain_wurcs_and_glycoct_from_glytoucan_id",
    "method": "GET",
    "url": "/api/obtain-wurcs-and-glycoct-from-glytoucan-id",
    "description": "Obtain WURCS and GlycoCT sequence representations for a given GlyTouCan ID.",
    "required_parameters": [],
    "parameter_types": {
      "gtcid": "Any"
    },
    "example": "obtain_wurcs_and_glycoct_from_glytoucan_id(gtcid=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/obtain_wurcs_and_glycoct_from_glytoucan_id.py"
  },
  {
    "tool_name": "partial_match_wurcs_rdf",
    "method": "GET",
    "url": "/api/partial-match-wurcs-rdf",
    "description": "Retrieve glycan structures that partially match the provided WURCS format text.",
    "required_parameters": [],
    "parameter_types": {
      "wurcs": "Any"
    },
    "example": "partial_match_wurcs_rdf(wurcs=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/partial_match_wurcs_rdf_GET.py"
  },
  {
    "tool_name": "poll_project_status",
    "method": "GET",
    "url": "/api/poll-project-status",
    "description": "Poll for the status of a default structure's project files.",
    "required_parameters": [],
    "parameter_types": {
      "pUUID": "Any"
    },
    "example": "poll_project_status(pUUID=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/poll_project_status_GET.py"
  },
  {
    "tool_name": "protein_detail",
    "method": "GET",
    "url": "/api/protein-detail",
    "description": "Retrieve detailed protein information from the GlyGen API.",
    "required_parameters": [],
    "parameter_types": {
      "uniprot_canonical_ac": "Any",
      "payload": "Any"
    },
    "example": "protein_detail(uniprot_canonical_ac='P14210', payload=None)",
    "total_parameters": 2,
    "source_file": "MCPTools/protein_detail.py"
  },
  {
    "tool_name": "search_antigens",
    "method": "GET",
    "url": "/api/search-antigens",
    "description": "Search antigens in UniProt using the EBI API.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "antigen_sequence": "Any",
      "antigen_id": "Any",
      "ensembl_ids": "Any",
      "match_score": "Any"
    },
    "example": "search_antigens(offset=0, size=100, accession=None, antigen_sequence=None, antigen_id=None, ensembl_ids=None, match_score=None)",
    "total_parameters": 7,
    "source_file": "MCPTools/search_antigens_GET.py"
  },
  {
    "tool_name": "search_epitope",
    "method": "GET",
    "url": "/api/search-epitope",
    "description": "Search for epitopes in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "epitope_sequence": "Any",
      "iedb_id": "Any",
      "match_score": "Any"
    },
    "example": "search_epitope(offset=0, size=100, accession=None, epitope_sequence=None, iedb_id=None, match_score=None)",
    "total_parameters": 6,
    "source_file": "MCPTools/search_epitope_GET.py"
  },
  {
    "tool_name": "search_gene_centric_proteins",
    "method": "GET",
    "url": "/api/search-gene-centric-proteins",
    "description": "Search gene centric proteins using the EBI API.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "upid": "Any",
      "accession": "Any",
      "gene": "Any"
    },
    "example": "search_gene_centric_proteins(offset=0, size=100, upid=None, accession=None, gene=None)",
    "total_parameters": 5,
    "source_file": "MCPTools/search_gene_centric_proteins_GET.py"
  },
  {
    "tool_name": "search_genomic_coordinates",
    "method": "GET",
    "url": "/api/search-genomic-coordinates",
    "description": "Search genomic coordinates for UniProt entries.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "chromosome": "Any",
      "ensembl": "Any",
      "gene": "Any",
      "protein": "Any",
      "taxid": "Any",
      "location": "Any",
      "format": "Any"
    },
    "example": "search_genomic_coordinates(offset=0, size=100, accession=None, chromosome=None, ensembl=None, gene=None, protein=None, taxid=None, location=None, format='json')",
    "total_parameters": 10,
    "source_file": "MCPTools/search_genomic_coordinates_GET.py"
  },
  {
    "tool_name": "search_mutagenesis",
    "method": "GET",
    "url": "/api/search-mutagenesis",
    "description": "Search mutagenesis information in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "taxid": "Any",
      "dbid": "Any"
    },
    "example": "search_mutagenesis(offset=0, size=100, accession=None, taxid=None, dbid=None)",
    "total_parameters": 5,
    "source_file": "MCPTools/search_mutagenesis_GET.py"
  },
  {
    "tool_name": "search_natural_variants",
    "method": "GET",
    "url": "/api/search-natural-variants",
    "description": "Search natural variants in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "sourcetype": "Any",
      "consequencetype": "Any",
      "wildtype": "Any",
      "alternativesequence": "Any",
      "location": "Any",
      "accession": "Any",
      "disease": "Any",
      "omim": "Any",
      "evidence": "Any",
      "taxid": "Any",
      "dbtype": "Any",
      "dbid": "Any"
    },
    "example": "search_natural_variants(offset=0, size=100, sourcetype=None, consequencetype=None, wildtype=None, alternativesequence=None, location=None, accession=None, disease=None, omim=None, evidence=None, taxid=None, dbtype=None, dbid=None)",
    "total_parameters": 14,
    "source_file": "MCPTools/search_natural_variants_GET.py"
  },
  {
    "tool_name": "search_protein_sequence_features_by_type",
    "method": "GET",
    "url": "/api/search-protein-sequence-features-by-type",
    "description": "Search protein sequence features of a given type in UniProt.",
    "required_parameters": [
      "type",
      "terms"
    ],
    "parameter_types": {
      "type": "str",
      "terms": "Union[str, List]",
      "offset": "Union[int, NoneType]",
      "size": "int",
      "categories": "Union[str, List, NoneType]",
      "types": "Union[str, List, NoneType]"
    },
    "example": "search_protein_sequence_features_by_type(type='example', terms='example', offset=0, size=100, categories=None, types=None)",
    "total_parameters": 6,
    "source_file": "MCPTools/search_protein_sequence_features_by_type_GET.py"
  },
  {
    "tool_name": "search_protein_sequence_features",
    "method": "GET",
    "url": "/api/search-protein-sequence-features",
    "description": "Search protein sequence features in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "reviewed": "Any",
      "gene": "Any",
      "exact_gene": "Any",
      "protein": "Any",
      "organism": "Any",
      "taxid": "Any",
      "categories": "Any",
      "types": "Any"
    },
    "example": "search_protein_sequence_features(offset=0, size=100, accession=None, reviewed=None, gene=None, exact_gene=None, protein=None, organism=None, taxid=None, categories=None, types=None)",
    "total_parameters": 11,
    "source_file": "MCPTools/search_protein_sequence_features_GET.py"
  },
  {
    "tool_name": "search_proteomes",
    "method": "GET",
    "url": "/api/search-proteomes",
    "description": "Search proteomes in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "upid": "Any",
      "name": "Any",
      "taxid": "Any",
      "keyword": "Any",
      "xref": "Any",
      "genome_acc": "Any",
      "is_ref_proteome": "Any",
      "is_redundant": "Any"
    },
    "example": "search_proteomes(offset=0, size=100, upid=None, name=None, taxid=None, keyword=None, xref=None, genome_acc=None, is_ref_proteome=None, is_redundant=None)",
    "total_parameters": 10,
    "source_file": "MCPTools/search_proteomes_GET.py"
  },
  {
    "tool_name": "search_proteomics_peptides",
    "method": "GET",
    "url": "/api/search-proteomics-peptides",
    "description": "Search proteomics peptides in UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Union[int, NoneType]",
      "size": "Union[int, NoneType]",
      "accession": "Union[str, List, NoneType]",
      "taxid": "Union[str, List, NoneType]",
      "upid": "Union[str, List, NoneType]",
      "datasource": "Union[str, List, NoneType]",
      "peptide": "Union[str, List, NoneType]",
      "unique": "Union[str, NoneType]"
    },
    "example": "search_proteomics_peptides(offset=0, size=100, accession=None, taxid=None, upid=None, datasource=None, peptide=None, unique=None)",
    "total_parameters": 8,
    "source_file": "MCPTools/search_proteomics_peptides_GET.py"
  },
  {
    "tool_name": "search_proteomics_peptide_ptm",
    "method": "GET",
    "url": "/api/search-proteomics-peptide-ptm",
    "description": "Search proteomics peptide post-translational modification (PTM) data from UniProt.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "taxid": "Any",
      "upid": "Any",
      "datasource": "Any",
      "peptide": "Any",
      "unique": "Any",
      "ptm": "Any",
      "confidence_score": "Any"
    },
    "example": "search_proteomics_peptide_ptm(offset=None, size=100, accession=None, taxid=None, upid=None, datasource=None, peptide=None, unique=None, ptm=None, confidence_score=None)",
    "total_parameters": 10,
    "source_file": "MCPTools/search_proteomics_peptide_ptm_GET.py"
  },
  {
    "tool_name": "search_uniparc_entries",
    "method": "GET",
    "url": "/api/search-uniparc-entries",
    "description": "Search UniParc entries using the EBI UniParc API.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "upi": "Any",
      "dbtype": "Any",
      "accession": "Any",
      "dbid": "Any",
      "gene": "Any",
      "protein": "Any",
      "taxid": "Any",
      "organism": "Any",
      "sequencechecksum": "Any",
      "ipr": "Any",
      "signaturetype": "Any",
      "signatureid": "Any",
      "upid": "Any",
      "seqLength": "Any",
      "rfDdtype": "Any",
      "rfDbid": "Any",
      "rfActive": "Any",
      "rfTaxId": "Any"
    },
    "example": "search_uniparc_entries(offset=0, size=100, upi=None, dbtype=None, accession=None, dbid=None, gene=None, protein=None, taxid=None, organism=None, sequencechecksum=None, ipr=None, signaturetype=None, signatureid=None, upid=None, seqLength=None, rfDdtype=None, rfDbid=None, rfActive=None, rfTaxId=None)",
    "total_parameters": 20,
    "source_file": "MCPTools/search_uniparc_entries_GET.py"
  },
  {
    "tool_name": "search_uniprot_entries_by_taxonomy_and_genomic_coordinates",
    "method": "GET",
    "url": "/api/search-uniprot-entries-by-taxonomy-and-genomic-coordinates",
    "description": "Search UniProt entries by taxonomy and genomic coordinates.",
    "required_parameters": [
      "taxonomy",
      "locations"
    ],
    "parameter_types": {
      "taxonomy": "Any",
      "locations": "Any",
      "offset": "Any",
      "size": "Any",
      "in_range": "Any",
      "format": "Any"
    },
    "example": "search_uniprot_entries_by_taxonomy_and_genomic_coordinates(taxonomy='example', locations='example', offset=0, size=100, in_range=None, format='json')",
    "total_parameters": 6,
    "source_file": "MCPTools/search_uniprot_entries_by_taxonomy_and_genomic_coordinates_GET.py"
  },
  {
    "tool_name": "search_uniprot_entries",
    "method": "GET",
    "url": "/api/search-uniprot-entries",
    "description": "Search UniProt entries using the EBI API.",
    "required_parameters": [],
    "parameter_types": {
      "offset": "Any",
      "size": "Any",
      "accession": "Any",
      "reviewed": "Any",
      "isoform": "Any",
      "goterms": "Any",
      "keywords": "Any",
      "ec": "Any",
      "gene": "Any",
      "exact_gene": "Any",
      "protein": "Any",
      "organism": "Any",
      "taxid": "Any",
      "pubmed": "Any",
      "seqLength": "Any",
      "md5": "Any"
    },
    "example": "search_uniprot_entries(offset=0, size=100, accession=None, reviewed=None, isoform=None, goterms=None, keywords=None, ec=None, gene=None, exact_gene=None, protein=None, organism=None, taxid=None, pubmed=None, seqLength=None, md5=None)",
    "total_parameters": 16,
    "source_file": "MCPTools/search_uniprot_entries_GET.py"
  },
  {
    "tool_name": "parse_cids_from_response",
    "method": "GET",
    "url": "/api/parse-cids-from-response",
    "description": "Parse CIDs from the XML response.",
    "required_parameters": [
      "response"
    ],
    "parameter_types": {
      "response": "Any"
    },
    "example": "parse_cids_from_response(response='example')",
    "total_parameters": 1,
    "source_file": "MCPTools/parse_cids_from_response.py"
  },
  {
    "tool_name": "structure_search_substructure",
    "method": "GET",
    "url": "/api/structure-search-substructure",
    "description": "Perform a substructure search in PubChem using the PUG REST API.",
    "required_parameters": [
      "smiles"
    ],
    "parameter_types": {
      "smiles": "Any",
      "MatchIsotopes": "Any",
      "MatchCharges": "Any",
      "RingsNotEmbedded": "Any",
      "SingleDoubleBondsMatch": "Any",
      "ChainsMatchRings": "Any",
      "StripHydrogen": "Any",
      "Stereo": "Any",
      "MaxSeconds": "Any",
      "MaxRecords": "Any",
      "output_format": "Any"
    },
    "example": "structure_search_substructure(smiles='example', MatchIsotopes=False, MatchCharges=False, RingsNotEmbedded=False, SingleDoubleBondsMatch=True, ChainsMatchRings=True, StripHydrogen=False, Stereo='ignore', MaxSeconds=None, MaxRecords=2000000, output_format='XML')",
    "total_parameters": 11,
    "source_file": "MCPTools/structure_search_substructure.py"
  },
  {
    "tool_name": "synonyms",
    "method": "GET",
    "url": "/api/synonyms",
    "description": "Get synonyms for a chemical compound from PubChem.",
    "required_parameters": [],
    "parameter_types": {
      "compound_name": "Any"
    },
    "example": "synonyms(compound_name=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/synonyms_GET.py"
  },
  {
    "tool_name": "validate_composition_for_glycosylation",
    "method": "GET",
    "url": "/api/validate-composition-for-glycosylation",
    "description": "Determine if the composition WURCS is valid for glycosylation.",
    "required_parameters": [],
    "parameter_types": {
      "wurcs": "Any"
    },
    "example": "validate_composition_for_glycosylation(wurcs=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/validate_composition_for_glycosylation.py"
  },
  {
    "tool_name": "validate_wurcs",
    "method": "GET",
    "url": "/api/validate-wurcs",
    "description": "Validate WURCS to find errors and warnings.",
    "required_parameters": [],
    "parameter_types": {
      "wurcs": "Any"
    },
    "example": "validate_wurcs(wurcs=None)",
    "total_parameters": 1,
    "source_file": "MCPTools/validate_wurcs.py"
  }
]